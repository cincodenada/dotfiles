" Exisiting in the Windows VIM install
set nocompatible
" Imported specific stuff from here instead...
" source $VIMRUNTIME/vimrc_example.vim 
" None of this Windows shit...
"source $VIMRUNTIME/mswin.vim
"behave mswin

call plug#begin('~/.vim/plugged')

Plug 'xolox/vim-misc'
Plug 'xolox/vim-shell'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'

Plug 'simnalamburt/vim-mundo'
Plug 'ruanyl/coverage.vim'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'jceb/vim-orgmode'

Plug 'jremmen/vim-ripgrep'
let g:rg_binary=system('which rg')

""""""
" IDE stuff
""""""
" Plug 'Valloric/YouCompleteMe'
Plug 'vim-syntastic/syntastic'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [ 'coc-tsserver' ]

" Git stuff
Plug 'airblade/vim-gitgutter'

" Node stuff
Plug 'eliba2/vim-node-inspect'
Plug 'heavenshell/vim-jsdoc', { 
  \ 'for': ['javascript', 'javascript.jsx','typescript'], 
  \ 'do': 'make install'
\}

Plug 'idanarye/vim-vebugger'

" Formatting suff
Plug 'rhysd/vim-clang-format'
let g:clang_format#command = 'clang-format-6.0'
Plug 'w0rp/ale'

""""
" Other misc
""""
" Syntax
Plug 'bfrg/vim-cpp-modern'
Plug 'rust-lang/rust.vim'
Plug 'rodjek/vim-puppet'
Plug 'justinj/vim-pico8-syntax'
Plug 'joukevandermaas/vim-ember-hbs'
Plug 'jelera/vim-javascript-syntax'
Plug 'GutenYe/json5.vim'

" Colors
Plug 'vim-scripts/mayansmoke'
Plug 'vim-scripts/candycode.vim'
Plug 'rainux/vim-desert-warm-256'
Plug 'altercation/vim-colors-solarized'

" Header/cpp jump
Plug 'nacitar/a.vim'

" Url linking
Plug 'vim-scripts/utl.vim'

" Searching niceness
Plug 'markonm/traces.vim'

call plug#end()

let g:org_todo_keywords=['TODO', 'DOING', 'DONE']

let mapleader=" "
let maplocalleader=" "

" --------------------------------
" File Formats
" --------------------------------
au BufNewFile,BufRead *.as setf actionscript
au BufNewFile,BufRead .eslintrc setf json

let javaScript_fold=1
set foldmethod=syntax

" FZF.vim stuff
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(), <bang>0)

" YCM Stuff
nnoremap <Leader>f :YcmCompleter FixIt<CR>
augroup formatter
  autocmd!
  autocmd filetype javascript call SetJSFormat()
  autocmd filetype cpp call SetClangFormat()
augroup END

function! SetJSFormat()
  nnoremap <Leader>ln :ALENext<CR>
  nnoremap <Leader>lp :ALEPrev<CR>
  nnoremap <Leader>q :ALEFix eslint<CR>
  nnoremap <C-f> :ALEFix eslint<CR>
  vnoremap <C-f> :ALEFix eslint<CR>
endfunction
function! SetClangFormat()
  nnoremap <Leader>q :ClangFormat<CR>
  nnoremap <C-f> :ClangFormat<CR>
  vnoremap <C-f> :ClangFormat<CR>
endfunction

" Node debugger keys
nnoremap <Leader>ds :NodeInspectStart<cr>
nnoremap <Leader>dr :NodeInspectRun<cr>
nnoremap <Leader>dc :NodeInspectConnect("127.0.0.1:9229")<cr>
nnoremap <Leader>di :NodeInspectStepInto<cr>
nnoremap <Leader>do :NodeInspectStepOut<cr>
nnoremap <Leader>dn :NodeInspectStepOver<cr>
nnoremap <Leader>db :NodeInspectToggleBreakpoint<cr>
nnoremap <Leader>dq :NodeInspectStop<cr>
" Quick stepping
nnoremap <C-S-n> :NodeInspectStepInto<cr>
nnoremap <C-n> :NodeInspectStepOver<cr>

" Add Node to path for tsserver
let $PATH.=':/Users/joel/.nvm/versions/node/v12.22.1/bin'

function! QuickFixNpmCommand(cmd)
  let l:cwd = getcwd()
  let l:path = l:cwd
  while l:path != '/'
    if filereadable(l:path . '/package.json')
      let l:cmdline = 'npm --prefix ' . l:path . ' run ' . a:cmd
      echo 'Running ' . l:cmdline
      cexpr system(l:cmdline)
      return
    endif
    let l:path = fnamemodify(l:path, ":h")
  endwhile
  echo "Couldn't find package.json staring from " . l:cwd
endfunction

" --------------------------------
" Imported from vimrc_example.vim
" --------------------------------
" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END
else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if !exists(":Gorigref")
  command Gorigref execute 'r!git show-ref | grep replace/'.@".' | cut -d" " -f1'
endif

" --------------------------------
" My custom commands
" --------------------------------
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab!

set nowrap
set autochdir

" Stupid ~ files
set nobackup
set nowritebackup
set undofile

let g:netrw_list_hide='\(^\|\s\s\)\zs\.[^\.]\S\+'
let g:netrw_menu=0
" Disable the fucking destructive one-key bindings goddamit
augroup netrw_maps
  autocmd!
  autocmd filetype netrw call KillMaps()
augroup END

function! KillMaps()
  silent! nunmap <buffer> S
  silent! nunmap <buffer> a
  silent! nunmap <buffer> <c-h>
endfunction

" FZF bindings
inoremap <C-P> <ESC>:GFiles<CR>i 
nnoremap <C-P> :GFiles<CR> 
vnoremap <C-P> :GFiles<CR>

" YCM rebindings
nnoremap <Leader>p :YcmCompleter GoTo<CR>

" Insert lines without going into insert mode
nnoremap ,o o<ESC>
nnoremap ,O O<ESC>

" Activate maps for Git Rebase
nnoremap <buffer> <silent> S :Cycle<CR>
nnoremap <buffer> <silent> Sp :Pick<CR>
nnoremap <buffer> <silent> Sr :Reword<CR>
nnoremap <buffer> <silent> Se :Edit<CR>
nnoremap <buffer> <silent> Ss :Squash<CR>
nnoremap <buffer> <silent> Sf :Fixup<CR>
nnoremap <buffer> <silent> Sx :Exec<CR>
if !exists(":Rebase")
fu! Rebase()
    if !exists('b:in_rebase') || !b:in_rebase
		nnoremap <buffer> <silent> p :Pick<CR>
		nnoremap <buffer> <silent> r :Reword<CR>
		nnoremap <buffer> <silent> e :Edit<CR>
		nnoremap <buffer> <silent> s :Squash<CR>
		nnoremap <buffer> <silent> f :Fixup<CR>
		nnoremap <buffer> <silent> x :Exec<CR>
        let b:in_rebase = 1
    else 
        nunmap p
        nunmap r
        nunmap e
        nunmap s
        nunmap f:help 
        nunmap x
        let b:in_rebase = 0
    endif
endfunction
endif

" From http://vim.wikia.com/wiki/Improved_hex_editing 
"nnoremap <C-H> :Hexmode<CR>
"inoremap <C-H> <Esc>:Hexmode<CR>
"vnoremap <C-H> :<C-U>Hexmode<CR>

" ex command for toggling hex mode - define mapping if desired
command! -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function! ToggleHex()
	" hex mode should be considered a read-only operation
	" save values for modified and read-only for restoration later,
	" and clear the read-only flag for now
	let l:modified=&mod
	let l:oldreadonly=&readonly
	let &readonly=0
	let l:oldmodifiable=&modifiable
	let &modifiable=1
	if !exists("b:editHex") || !b:editHex
		" save old options
		let b:oldft=&ft
		let b:oldbin=&bin
		" set new options
		setlocal binary " make sure it overrides any textwidth, etc.
		silent :e " this will reload the file without trickeries 
							"(DOS line endings will be shown entirely )
		let &ft="xxd"
		" set status
		let b:editHex=1
		" switch to hex editor
		%!xxd
	else
		" restore old options
		let &ft=b:oldft
		if !b:oldbin
			setlocal nobinary
		endif
		" set status
		let b:editHex=0
		" return to normal editing
		%!xxd -r
	endif
	" restore values for modified and read only state
	let &mod=l:modified
	let &readonly=l:oldreadonly
	let &modifiable=l:oldmodifiable
endfunction

" This behavior is buggy, disable it
let php_show_semicolon_error = 0

if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  cnoreabbrev csa cs add
  cnoreabbrev csf cs find
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help

  if !exists(":Cscope")
    command -nargs=0 Cscope cs add $VIMSRC/src/cscope.out $VIMSRC/src
  endif
endif

set t_Co=256
colorscheme desert-warm-256

" Syntax debugging
" Show the stack of syntax hilighting classes affecting whatever is under the
" cursor. First item in list is the outer region, followed by items contained in
" that one (taken from Steve Losh's vimrc)
function! s:SynStack()
    echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, ''name'')'), ' > ')
endfunction

" Display the syntax highlighting group of the item under the cursor
function! s:HiGroup()
    echo 'hi<' . synIDattr(synID(line('.'),col('.'),1),'name') . '> trans<'
                \ . synIDattr(synID(line('.'),col('.'),0),'name') . '> lo<'
                \ . synIDattr(synIDtrans(synID(line('.'),col('.'),1)),'name') . '>'
endfunction

nnoremap <F6> :call <sid>SynStack()<CR>
nnoremap <F7> :call <sid>HiGroup()<CR>"

set grepprg=rg\ -n
