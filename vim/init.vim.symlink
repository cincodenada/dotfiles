set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath=&runtimepath

call plug#begin('~/.vim/plugged')

source ~/.dotfiles/vim/plug.vim

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-orgmode/orgmode'

Plug 'nvim-lua/plenary.nvim'

Plug 'neovim/nvim-lspconfig'
Plug 'jose-elias-alvarez/typescript.nvim'
Plug 'jose-elias-alvarez/nvim-lsp-ts-utils'
Plug 'jose-elias-alvarez/null-ls.nvim'

Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-symbols.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

Plug 'folke/trouble.nvim'
call plug#end()

source ~/.vimrc

lua << EOF

-- Load custom tree-sitter grammar for org filetype
require('orgmode').setup_ts_grammar()

-- Tree-sitter configuration
require'nvim-treesitter.configs'.setup {
  -- If TS highlights are not enabled at all, or disabled via `disable` prop, highlighting will fallback to default Vim syntax highlighting
  highlight = {
    enable = true,
    disable = {'org'}, -- Remove this to use TS highlighter for some of the highlights (Experimental)
    additional_vim_regex_highlighting = {'org'}, -- Required since TS highlighter doesn't support all syntax features (conceal)
  },
  ensure_installed = {'org'}, -- Or run :TSUpdate org
}

require('orgmode').setup({
  org_agenda_files = {'~/Sync/org/*'},
  org_default_notes_file = '~/Sync/org/refile.org',
  org_agenda_templates = {
    t = { description = 'Task', template = "* TODO %?\n  %u" },
    f = { description = 'File Task', template = "* TODO %?\n  %u\n  %a" },
  },
})

local setup_lsp = function(client)
	-- See `:help nvim_buf_set_keymap()` for more information
	vim.api.nvim_buf_set_keymap(0, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', {noremap = true})
	vim.api.nvim_buf_set_keymap(0, 'n', '<c-]>', '<cmd>lua vim.lsp.buf.definition()<CR>', {noremap = true})
	-- ... and other keymappings for LSP

	-- Use LSP as the handler for omnifunc.
	--    See `:help omnifunc` and `:help ins-completion` for more information.
	vim.api.nvim_buf_set_option(0, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

	-- Use LSP as the handler for formatexpr.
	--    See `:help formatexpr` for more information.
	vim.api.nvim_buf_set_option(0, 'formatexpr', 'v:lua.vim.lsp.formatexpr()')

	-- For plugins with an `on_attach` callback, call them here. For example:
	-- require('completion').on_attach()

  local ts_utils = require("nvim-lsp-ts-utils")
  ts_utils.setup({
    filter_out_diagnostics_by_code = {
      7044,  -- Parameter type inference
			80001, -- CommonJS module
    }
  })
  ts_utils.setup_client(client)

	local source_abbrev = {
		typescript = "TS"
	}

  vim.diagnostic.config{
    virtual_text = {
      format = function(diagnostic)
        return string.format(
          "%s%s: %s",
          source_abbrev[diagnostic.source], diagnostic.code, diagnostic.message
        )
      end
    }
  }
end

require('lspconfig').tsserver.setup{
  on_attach = setup_lsp
}

require('trouble').setup{
  icons = false,
  fold_open = "‚ñ∂",
  fold_closed = "‚ñº",
  indent_lines = false,
  signs = {
    error = "‚õîÔ∏è",
    warning = "‚ö†Ô∏è",
    hint = "ü§ñ",
    information = "üíÅ",
  },
}

require("null-ls").setup({
    sources = {
        --require("null-ls").builtins.diagnostics.eslint,
        require("null-ls").builtins.diagnostics.eslint_d,
        require("null-ls").builtins.completion.spell,
        require("null-ls").builtins.formatting.prettier
    },
})

require('telescope').load_extension('fzf')

EOF

augroup lsp
	autocmd!
	autocmd CursorHold,CursorHoldI * lua vim.diagnostic.open_float({ focusable=false })
augroup END
nmap <Leader>oo :FZF ~/Sync/org<CR>

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fr <cmd>Telescope git_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fG <cmd>Telescope grep_string<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>f? <cmd>Telescope help_tags<cr>
nnoremap <leader>fe <cmd>Telescope symbols<cr>
nnoremap <leader>fhc <cmd>Telescope command_history<cr>
nnoremap <leader>fhs <cmd>Telescope command_history<cr>
